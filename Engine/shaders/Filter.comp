#version 420
#extension GL_ARB_compute_shader : enable
layout (local_size_x = 32, local_size_y = 32) in;

layout(set = 0, binding = 0) uniform sampler2D inputImage;  
layout(set = 0, binding = 1, rgba8) uniform writeonly image2D resultImage; // half the size of input

const float threshold = 1.0;

/*
layout(set = 0, binding = 2) uniform FilterInfo {
    float threshold;
} filterInfo;
*/


// [Jimenez14] http://goo.gl/eomGso
// . . . . . . .
// . A . B . C .
// . . D . E . .
// . F . G . H .
// . . I . J . .
// . K . L . M .
// . . . . . . .
vec4 downsample(vec2 uv, vec2 texelSize) {
	vec4 A = texture(inputImage, uv + texelSize * vec2(-1.0, -1.0));
    vec4 B = texture(inputImage, uv + texelSize * vec2( 0.0, -1.0));
    vec4 C = texture(inputImage, uv + texelSize * vec2( 1.0, -1.0));
    vec4 D = texture(inputImage, uv + texelSize * vec2(-0.5, -0.5));
    vec4 E = texture(inputImage, uv + texelSize * vec2( 0.5, -0.5));
    vec4 F = texture(inputImage, uv + texelSize * vec2(-1.0,  0.0));
    vec4 G = texture(inputImage, uv);
    vec4 H = texture(inputImage, uv + texelSize * vec2( 1.0,  0.0));
    vec4 I = texture(inputImage, uv + texelSize * vec2(-0.5,  0.5));
    vec4 J = texture(inputImage, uv + texelSize * vec2( 0.5,  0.5));
    vec4 K = texture(inputImage, uv + texelSize * vec2(-1.0,  1.0));
    vec4 L = texture(inputImage, uv + texelSize * vec2( 0.0,  1.0));
    vec4 M = texture(inputImage, uv + texelSize * vec2( 1.0,  1.0));

    vec2 div = 0.25 * vec2(0.5, 0.125);

    vec4 o = (D + E + I + J) * div.x;
    o += (A + B + G + F) * div.y;
    o += (B + C + H + G) * div.y;
    o += (F + G + L + K) * div.y;
    o += (G + H + M + L) * div.y;

    return o;
}

void main() {
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy); // coordinates on result image
	vec2 texSize = textureSize(inputImage, 0);
	ivec2 inputPos = pos * 2;
	vec2 uv = vec2(inputPos) / texSize;

	vec3 color = downsample(uv, 1 / texSize).xyz;

	float brightness = max(color.r, max(color.g, color.b));
    float contribution = max(0, brightness - threshold);
	contribution /= max(brightness, 0.00001);
	color = color * contribution;
	
	imageStore(resultImage, pos, vec4(color, 1.0));
}