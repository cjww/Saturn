#version 420
#extension GL_ARB_compute_shader : enable
layout (local_size_x = 32, local_size_y = 32) in;

layout(set = 0, binding = 0, rgba8) uniform readonly image2D inputImage;  
layout(set = 0, binding = 1, rgba8) uniform writeonly image2D resultImage;  


float normpdf(in float x, in float sigma)
{
	return 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;
}

void main() {

    ivec2 pos = ivec2( gl_GlobalInvocationID.xy );

    //declare stuff
	const int mSize = 11;
	const int kSize = (mSize-1)/2;
	float kernel[mSize];
	vec3 final_colour = vec3(0.0);
	
	//create the 1-D kernel
	float sigma = 7.0;
	float Z = 0.0;
	for (int j = 0; j <= kSize; ++j)
	{
		kernel[kSize+j] = kernel[kSize-j] = normpdf(float(j), sigma);
	}
	
	//get the normalization factor (as the gaussian has been clamped)
	for (int j = 0; j < mSize; ++j)
	{
		Z += kernel[j];
	}
	
	//read out the texels
	for (int i=-kSize; i <= kSize; ++i)
	{
		for (int j=-kSize; j <= kSize; ++j)
		{
			//vec2 inUvSpace = vec2(float(i) / 1200.0,float(j) / 800.0);

			final_colour += kernel[kSize+j]*kernel[kSize+i] * imageLoad(inputImage, (pos + ivec2(i, j))).rgb;

		}
	}
	
	
	imageStore(resultImage, pos, vec4(final_colour/(Z*Z), 1.0));

}