#version 420
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable
layout (local_size_x = 32, local_size_y = 32) in;

layout(set = 0, binding = 0) uniform sampler2D colorImage;  
layout(set = 0, binding = 1, rgba8) uniform readonly image2D bloomImage;
layout(set = 0, binding = 2, rgba8) uniform readonly image2D toneMapping;

layout(set = 0, binding = 3, rgba8) uniform writeonly image2D resultImage;

shared int sumLuminance;

vec4 upsample(ivec2 coordinate, vec4 sampleScale, vec2 texelSize) {

	vec4 d = vec4(1.0, 1.0, -1.0, 0.0) * sampleScale;

    vec4 s;
    s =  imageLoad(bloomImage, ivec2(coordinate - texelSize * d.xy));
    s += imageLoad(bloomImage, ivec2(coordinate - texelSize * d.wy)) * 2.0;
    s += imageLoad(bloomImage, ivec2(coordinate - texelSize * d.zy));
    s += imageLoad(bloomImage, ivec2(coordinate + texelSize * d.zw)) * 2.0;
    s += imageLoad(bloomImage, ivec2(coordinate					  )) * 4.0;
    s += imageLoad(bloomImage, ivec2(coordinate + texelSize * d.xw)) * 2.0;
    s += imageLoad(bloomImage, ivec2(coordinate + texelSize * d.zy));
    s += imageLoad(bloomImage, ivec2(coordinate + texelSize * d.wy)) * 2.0;
    s += imageLoad(bloomImage, ivec2(coordinate + texelSize * d.xy));

    return s * (1.0 / 16.0);
}


vec4 reinhard(vec4 color, float key, float white) {
    float luminance = dot(color, vec4(0.2126, 0.7152, 0.0722, 0));
    float result = (luminance * (1.0 + (luminance / (white * white))) ) / (luminance + 1.0);
    return vec4(result, result, result, 1.0);
}

vec4 filmicToneMapping(vec4 color) {
    vec3 x = color.rgb;
    vec3 result = (x * (6.2 * x + 0.5)) / (x * (6.2 * x + 1.7) + 0.06);
    return vec4(result, 1.0);
}

vec4 gammaCorrect(vec4 color, float gamma) {
    return pow(color, vec4(1.0 / gamma));
}

void main() {
    if(gl_LocalInvocationIndex == 0) {
        sumLuminance = 0;
    }

    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
	ivec2 colorImageExtent = textureSize(colorImage, 0);
	
	vec2 uv = pos / vec2(colorImageExtent);
	vec4 color = texture(colorImage, uv);
    
    // add Bloom
	vec4 bloom = upsample(ivec2(pos * 0.5), vec4(1), vec2(1));
    color += bloom;
   
    // Tonemapping
    color = gammaCorrect(color, 2.2);
    color = color * filmicToneMapping(color);
    //color = color * reinhard(color, 0.18, 1.0);

	imageStore(resultImage, pos, vec4(color.rgb, 1.0));
}